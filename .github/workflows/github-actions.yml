name: 'CI/CD'

on:
  pull_request:
    types:
      - opened # PR이 열렸을 때
      - synchronize # PR이 업데이트 되었을 때
      - reopened # PR이 다시 열렸을 때
  pull_request_target:
    types:
      - closed # PR이 머지되었을 때

jobs:
  run-on-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # pull_request 이벤트일 때 실행
    permissions:
      contents: write # 콘텐츠를 읽고 쓸 수 있는 권한
      pull-requests: write # PR을 읽고 쓸 수 있는 권한
      checks: write # 체크 실행을 위한 권한
    steps:
      - name: 'Git checkout' # Git 체크아웃
        uses: actions/checkout@v4.2.0
        with:
          ref: ${{ github.event.pull_request.head.sha }} # 실제 PR 커밋을 체크아웃 (머지 커밋이 아님)
          fetch-depth: 0 # PR 분석을 위해 전체 기록을 가져옴
      - name: 'Qodana Scan' # Qodana 코드 품질 스캔 수행
        uses: JetBrains/qodana-action@v2024.1.9
        with:
          pr-mode: true # PR 모드 활성화
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_1109214742 }} # Qodana 인증 토큰
          QODANA_ENDPOINT: 'https://qodana.cloud' # Qodana 엔드포인트

  run-on-pr-merged:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true }} # PR이 머지된 경우 실행
    runs-on: ubuntu-latest
    permissions:
      id-token: write # AWS 자격 증명 구성을 위해 필요한 권한
    steps:
      - name: 'Git checkout' # Git 체크아웃
        uses: actions/checkout@v4.2.0
        with:
          ref: ${{ github.event.pull_request.head.sha }} # 실제 PR 커밋을 체크아웃 (머지 커밋이 아님)
          fetch-depth: 0 # PR 분석을 위해 전체 기록을 가져옴
      - name: 'Login to Docker Hub' # Docker Hub 로그인
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Docker Hub 사용자 이름
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Docker Hub 토큰
      - name: 'Build and push Docker images' # Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v6.9.0
        with:
          context: . # Docker 빌드 컨텍스트 설정
          file: infra/Dockerfile # 사용할 Dockerfile 경로
          push: true # 이미지를 Docker Hub에 푸시
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-server:latest # Docker 이미지 태그 설정
      - name: 'Configure AWS credentials' # AWS 자격 증명 구성
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # 사용할 AWS 역할 ARN
          aws-region: ${{ secrets.AWS_REGION }} # AWS 리전 설정
      - name: 'Create docker-compose .env file' # docker-compose .env 파일 생성
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> infra/.env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> infra/.env
          echo "SPRING_PROFILES_ACTIVE=${{ github.ref_name }}" >> infra/.env
          echo "JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}" >> infra/.env
      - name: 'Upload to S3 for AWS CodeDeploy Required Files' # AWS CodeDeploy를 위한 파일 S3 업로드
        run: |
          zip -r deploy.zip infra/scripts infra/.env infra/docker-compose.yml infra/appspec.yml # 필요한 파일을 zip으로 압축
          aws s3 cp --acl private ./deploy.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/deploy.zip # S3에 업로드
      - name: 'Deploy to AWS CodeDeploy' # AWS CodeDeploy를 사용하여 배포
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_CODEDEPLOY_APPLICATION_NAME }} \ # CodeDeploy 애플리케이션 이름
            --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \ # CodeDeploy 배포 그룹 이름
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},key=deploy.zip,bundleType=zip # S3 위치 설정