spring:
  application:
    name: api-server
  data:
    mongodb:
      uri: mongodb://myuser:mypassword@localhost:27017/api-server
  servlet:
    multipart:
      enabled: true # 멀티파트 업로드 지원여부 (default: true)
      file-size-threshold: 0B # 파일을 디스크에 저장하지 않고 메모리에 저장하는 최소 크기 (default: 0B)
      max-file-size: 10MB # 한개 파일의 최대 사이즈 (default: 1MB)
      max-request-size: 100MB # 한개 요청의 최대 사이즈 (default: 10MB)
  security:
    oauth2:
      client:
        registration:
#          google:
#            client-id: YOUR_GOOGLE_CLIENT_ID
#            client-secret: YOUR_GOOGLE_CLIENT_SECRET
##            redirect-uri: "{baseUrl}/login/oauth2/code/google"
#            redirect-uri: http://localhost:8080/oauth2/callback
#            scope: profile, email
#          naver:
#            client-id: YOUR_NAVER_CLIENT_ID
#            client-secret: YOUR_NAVER_CLIENT_SECRET
#            redirect-uri: http://localhost:8080/oauth2/callback
#            authorization-grant-type: authorization_code
#            client-authentication-method: POST
#            scope: nickname, email, profile_image
#            client-nickname: Naver
          kakao:
            client-id: 3fffa1fbbc4f32c6ad0dd3bdd842d095
            client-secret: B04XARSeNMNumxUBxGrzOZos5pqGD0lk
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao # http://localhost:8080/oauth2/authorization/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname, profile_image
            client-name: Kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
springdoc:
  swagger-ui:
    default-models-expand-depth: -1 # API 문서 밑에 Schema 모델 없애기
    enabled: true
    path: /  # Swagger UI 기본 접속 경로
    operations-sorter: method # API 문서의 API 목록 정렬 방식
    tags-sorter: alpha # API 문서의 태그 정렬 방식
  api-docs:
    enabled: true
    path: /v3/api-docs # Swagger API 기본접속 경로
logging:
  level: # 적용할 곳과 레벨을 지정합니다.
    root: warn
    com.leesh: debug
  file: # 로그 파일에 대한 명시입니다. 주의점 name과 path중 하나만 사용해야합니다. path 사용을 권장합니다.
    path: logs # 로그 파일의 위치 절대 경로를 적어주시면 됩니다.
  logback:
    rollingpolicy:
      file-name-pattern: ${logging.file.path}/api-server.%d{yyyy-MM-dd_HH-mm-ss}.%i.log # 로그 파일의 이름 패턴을 지정합니다.
      clean-history-on-start: true # 애플리케이션 재실행시 로그 파일을 초기화 여부 설정
      max-file-size: 10MB # 로그 파일의 최대 크기이며, 크기가 넘어가면 새로운 로그파일 작성
      max-history: 7 # 로그 파일의 최대 수
      total-size-cap: 100MB # 로그 파일의 총 크기이며, 넘어갈 시 가장 오래된 로그 파일 삭제
jasypt:
  encryptor:
    password: ${JASYPT_PASSWORD} # 암호화 키를 지정합니다.
custom:
  storage:
    uri:
      scheme: file # 파일 저장 방식을 지정합니다.
      host: '' # 파일 저장 호스트를 지정합니다.'
      base-path: /Users/leesh/Downloads/inflpick/api-server/data # 파일 저장 경로를 지정합니다.
  cors:
    allowed-origin-patterns: '*'
    allowed-methods: GET, POST, PUT, DELETE, OPTIONS
    allow-credentials: true # 쿠키를 전송할 수 있는지 여부를 지정합니다.
    allowed-headers: Authorization, Content-Type, X-Requested-With, X-XSRF-TOKEN, MultiPartFile
  jwt:
    secret-key: 'AbC123!dEfGhIjKBCSWAPPALLL//lMadw@#dwako!!nOpQrStUvW33A3xYz1234567890+/ABCD' # JWT 암호화 키를 지정합니다.
    access-token-expires-in-seconds: 3600 # 1시간
    refresh-token-expires-in-seconds: 1209600 # 2주
